import{_ as e,c as a,o as i,ag as t}from"./chunks/framework.CSeR4K32.js";const k=JSON.parse('{"title":"Customized partitions","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"en/guide/pve/pve_custom.md","filePath":"en/guide/pve/pve_custom.md","lastUpdated":1760660264000}'),n={name:"en/guide/pve/pve_custom.md"};function o(p,s,l,h,c,r){return i(),a("div",null,s[0]||(s[0]=[t(`<h1 id="customized-partitions" tabindex="-1">Customized partitions <a class="header-anchor" href="#customized-partitions" aria-label="Permalink to &quot;Customized partitions&quot;">​</a></h1><h2 id="installing-proxmox-ve-7-on-a-non-debian-system" tabindex="-1">Installing Proxmox VE 7 on a non-Debian system <a class="header-anchor" href="#installing-proxmox-ve-7-on-a-non-debian-system" aria-label="Permalink to &quot;Installing Proxmox VE 7 on a non-Debian system&quot;">​</a></h2><p>Minimum local hardware requirements are the same as for the previous normal installation.</p><p>You need to install docker first.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>curl -sSL https://get.docker.com/ | sh</span></span>
<span class="line"><span>curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-linux-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span></span>
<span class="line"><span>chmod +x /usr/local/bin/docker-compose</span></span>
<span class="line"><span>docker-compose --version</span></span></code></pre></div><p>Then use <code>uname -m</code> to query the architecture and use the command corresponding to the architecture</p><p>The opened PVE panel information is:</p><p>Login username and password are both <code>root</code>, after logging in be sure to use web SSH to change the password to avoid being blown up.</p><p>When using host SSH, be sure to log into the corresponding <code>https://IPV4:8006</code> to use SSH on the web panel, do not use the host&#39;s port 22 to manipulate the PVE.</p><p>Because the SSH on the web panel is inside Docker, it does not support subsequent one-click configurations, so please configure your own gateway, etc. to use it.</p><p>X86 architecture</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -idt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--privileged </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--add-host </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pve:10.13.14.101</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--hostname </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spiritlhl/pve:7_x86_64</span></span></code></pre></div><p>ARM architecture</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -idt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --network</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> host</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--privileged </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--add-host </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pve:10.13.14.101</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--hostname </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">pve</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">spiritlhl/pve:7_aarch64</span></span></code></pre></div><p>The web panel is actually opened in the container, but the network has used the host mode, the port of the PVE is about the same as the port of the host used.</p><p>But here the login username and password become <code>root</code> and <code>root</code>, if you need to change it please <code>docker exec -it pve /bin/bash</code> enter and change the password of root, then press <code>ctrl</code> key and <code>A+D</code> to exit.</p><p>There are many bugs need to be fixed, welcome to PR to solve the problem, the actual test on the Ubuntu system host machine to install <code>Proxmox VE</code> panel success, solved the problem of installing <code>Proxmox VE</code> over the network can only be used to use the Debian system as a host machine!</p><h2 id="optimizing-the-memory-footprint-of-proxmox-ve-on-low-configuration-systems" tabindex="-1">Optimizing the memory footprint of Proxmox-VE on low-configuration systems <a class="header-anchor" href="#optimizing-the-memory-footprint-of-proxmox-ve-on-low-configuration-systems" aria-label="Permalink to &quot;Optimizing the memory footprint of Proxmox-VE on low-configuration systems&quot;">​</a></h2><p>The following optimization can reduce at least 400M memory occupation, some machines can reduce more than 6GB, the actual reduction of how much memory occupation to test by yourself.</p><h3 id="reduce-the-number-of-max-workers" tabindex="-1">Reduce the number of max_workers <a class="header-anchor" href="#reduce-the-number-of-max-workers" aria-label="Permalink to &quot;Reduce the number of max_workers&quot;">​</a></h3><p>Execute the following command to query</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd /usr/share/perl5/PVE/Service</span></span>
<span class="line"><span>grep &#39;max_workers =&gt; 3&#39; *</span></span></code></pre></div><p>you can see</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pvedaemon.pm:    max_workers =&gt; 3,</span></span>
<span class="line"><span>pveproxy.pm:    max_workers =&gt; 3,</span></span>
<span class="line"><span>spiceproxy.pm:    max_workers =&gt; 3, # todo: do we need more?</span></span></code></pre></div><p>The default max_workers is 3, you can modify the corresponding file, the minimum max_workers can be 1, you can use the following commands to modify them:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sed -i &quot;s/max_workers =&gt; 3/max_workers =&gt; 1/g&quot; /usr/share/perl5/PVE/Service/*</span></span></code></pre></div><h3 id="deactivation-of-ha-services" tabindex="-1">Deactivation of HA services <a class="header-anchor" href="#deactivation-of-ha-services" aria-label="Permalink to &quot;Deactivation of HA services&quot;">​</a></h3><p>Clusters (multi-nodes) can use the HA service, if it is a single node, or there is no need for HA use, you can execute the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl stop pve-ha-lrm.service </span></span>
<span class="line"><span>systemctl stop pve-ha-crm.service </span></span>
<span class="line"><span>systemctl disable pve-ha-lrm.service </span></span>
<span class="line"><span>systemctl disable pve-ha-crm.service</span></span></code></pre></div><h3 id="disable-firewall-service" tabindex="-1">Disable firewall service <a class="header-anchor" href="#disable-firewall-service" aria-label="Permalink to &quot;Disable firewall service&quot;">​</a></h3><p>The service can be deactivated by executing the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl stop pve-firewall.service </span></span>
<span class="line"><span>systemctl disable pve-firewall.service</span></span></code></pre></div><h3 id="discontinuation-of-cheduler-service" tabindex="-1">Discontinuation of cheduler service <a class="header-anchor" href="#discontinuation-of-cheduler-service" aria-label="Permalink to &quot;Discontinuation of cheduler service&quot;">​</a></h3><p>If you don&#39;t need scheduled tasks, such as backups and synchronizations, you can deactivate the service by executing the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl stop pvescheduler.service</span></span>
<span class="line"><span>systemctl disable pvescheduler.service</span></span></code></pre></div><h3 id="discontinuation-of-spiceproxy-service" tabindex="-1">Discontinuation of Spiceproxy service <a class="header-anchor" href="#discontinuation-of-spiceproxy-service" aria-label="Permalink to &quot;Discontinuation of Spiceproxy service&quot;">​</a></h3><p>If you do not need to use Spice for VM/container linking (the Arm version itself does not support Spice), you can deactivate the service by executing the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl stop spiceproxy.service </span></span>
<span class="line"><span>systemctl disable spiceproxy.service</span></span></code></pre></div><h3 id="deleting-the-memory-cache-using-a-timed-task" tabindex="-1">Deleting the memory cache using a timed task <a class="header-anchor" href="#deleting-the-memory-cache-using-a-timed-task" aria-label="Permalink to &quot;Deleting the memory cache using a timed task&quot;">​</a></h3><p>Clearing different types of caches and performing TRIM operations on file systems</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">TEMP_CRON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mktemp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crontab</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $TEMP_CRON</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;*/5 * * * * echo 1 &gt; /proc/sys/vm/drop_caches&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $TEMP_CRON</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;*/5 * * * * sleep 60; echo 2 &gt; /proc/sys/vm/drop_caches&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $TEMP_CRON</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;*/5 * * * * sleep 120; echo 3 &gt; /proc/sys/vm/drop_caches&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $TEMP_CRON</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;*/5 * * * * sleep 180; fstrim -av&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $TEMP_CRON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> crontab</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $TEMP_CRON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $TEMP_CRON</span></span></code></pre></div><p>The above commands require the <code>sudo</code> and <code>crontab</code> commands to be available on the host itself.</p><h2 id="self-mapping-of-public-ports-on-kvm-vms-with-open-nats" tabindex="-1">Self-mapping of public ports on KVM VMs with open NATs <a class="header-anchor" href="#self-mapping-of-public-ports-on-kvm-vms-with-open-nats" aria-label="Permalink to &quot;Self-mapping of public ports on KVM VMs with open NATs&quot;">​</a></h2><p>All of the following operations are performed on the PVE host computer</p><p>Use the <code>nano</code> or <code>vim</code> command to modify the file to add port mapping:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>/etc/iptables/rules.v4</span></span></code></pre></div><p>For example, if I have a KVM VM with an intranet IP of <code>172.16.1.152</code> (VMs can view the intranet IP address on the web side no matter what system they are on), and MYSQL has been set up to listen to <code>3306</code>, and I need to use the <code>tcp</code> protocol to map out to the <code>33306</code> port on the host IP, I would add the following line to the <code>COMMIT</code> line in the file above, then add the following line</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-A PREROUTING -i vmbr0 -p tcp -m tcp -dport 33306 -j DNAT --to-destination 172.16.1.152:3306</span></span></code></pre></div><p>If it&#39;s udp protocol, just change <code>tcp</code> to <code>udp</code> in the code above</p><p>Save the file and exit file editing and then execute:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>service netfilter-persistent restart</span></span></code></pre></div><p>Reload Port Mapping</p><p>At this point, on the host machine, execute the</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>lsof -i:33306</span></span></code></pre></div><p>To see if the port mapping rule is in effect</p><h2 id="customizing-the-cpu-type-when-opening-a-linux-virtual-machine" tabindex="-1">Customizing the CPU TYPE when opening a Linux virtual machine <a class="header-anchor" href="#customizing-the-cpu-type-when-opening-a-linux-virtual-machine" aria-label="Permalink to &quot;Customizing the CPU TYPE when opening a Linux virtual machine&quot;">​</a></h2><p>On the host computer, use something like</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kvm64&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/local/bin/cpu_type</span></span></code></pre></div><p>Specifying the default CPU TYPE in this way allows you to replace <code>kvm64</code> with the type you want</p><h2 id="when-creating-virtual-machines-or-containers-you-must-use-a-custom-ipv6-list" tabindex="-1">When creating virtual machines or containers, you must use a custom IPv6 list <a class="header-anchor" href="#when-creating-virtual-machines-or-containers-you-must-use-a-custom-ipv6-list" aria-label="Permalink to &quot;When creating virtual machines or containers, you must use a custom IPv6 list&quot;">​</a></h2><p>Enter each IPv6 address to be assigned on a separate line in <code>/usr/local/bin/pve_appended_content.txt</code>, such as:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2a01:4f8:1c1c:94de::2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2a01:4f8:1c1c:94de::3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2a01:4f8:1c1c:94de::4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2a01:4f8:1c1c:94de::5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2a01:4f8:1c1c:94de::6</span></span></code></pre></div><p>This approach can be used when the host machine has not been fully allocated a subnet larger than /80, possesses only a few IPv6 addresses, yet requires the creation of instances with independent IPv6 addresses.</p>`,63)]))}const u=e(n,[["render",o]]);export{k as __pageData,u as default};
