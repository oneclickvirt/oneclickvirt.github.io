import{_ as t,c as n,o as i,ag as a}from"./chunks/framework.CSeR4K32.js";const m=JSON.parse('{"title":"Preface","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"en/guide/oneclickvirt/oneclickvirt_precheck.md","filePath":"en/guide/oneclickvirt/oneclickvirt_precheck.md","lastUpdated":1760585387000}'),o={name:"en/guide/oneclickvirt/oneclickvirt_precheck.md"};function r(s,e,p,c,l,d){return i(),n("div",null,e[0]||(e[0]=[a(`<h1 id="preface" tabindex="-1">Preface <a class="header-anchor" href="#preface" aria-label="Permalink to &quot;Preface&quot;">​</a></h1><p>This is a control panel for interfacing with mainstream virtualization technologies, supplementing features not supported by virtualization technologies themselves, such as user management, traffic monitoring, NAT port mapping, and custom system images.</p><p>Welcome to give the project a <code>Star</code> for free support --&gt; <a href="https://github.com/oneclickvirt/oneclickvirt" target="_blank" rel="noreferrer">https://github.com/oneclickvirt/oneclickvirt</a></p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>This is a project in the early stages of development, there may be a variety of bugs and instability, if you use it at your own discretion and risk, updates will be more frequent</p></div><h2 id="environment-requirements" tabindex="-1">Environment Requirements <a class="header-anchor" href="#environment-requirements" aria-label="Permalink to &quot;Environment Requirements&quot;">​</a></h2><p>Supported architectures: amd64 or arm64</p><p>Supported systems: Linux, Windows</p><p>Only a public network connection is required. The deployed machine does not need to have an independent public IP address; this is just a virtualization control panel that only needs port access to display the frontend.</p><p>This control panel has no environment dependency requirements, only a daemon-started backend and a corresponding frontend static file folder.</p><p>Frontend static files can be deployed through <code>nginx</code> or <code>caddy</code> or <code>OpenResty</code>. Non-source code deployment and non-Docker deployment require API path reverse proxy to the backend port.</p><h2 id="platform-features" tabindex="-1">Platform Features <a class="header-anchor" href="#platform-features" aria-label="Permalink to &quot;Platform Features&quot;">​</a></h2><ul><li><p>Provider Integration: Supports four major mainstream virtualization platforms: ProxmoxVE, Incus, Docker, LXD</p></li><li><p>Flexible Instance Types: Supports creating Virtual Machines (VM) and Containers, providing a unified virtualization resource management experience through abstracted design</p></li><li><p>Built-in image seed data, no need to search for corresponding platform images yourself. All platforms come with self-compiled image loading and support unified management</p></li><li><p>Automatic NAT Port Mapping: Supports automatic port mapping for IPv4/IPv6, multiple network types:</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NAT IPv4</span></span>
<span class="line"><span>NAT IPv4 + Independent IPv6</span></span>
<span class="line"><span>Independent IPv4</span></span>
<span class="line"><span>Independent IPv4 + IPv6</span></span>
<span class="line"><span>Pure IPv6</span></span></code></pre></div><ul><li><p>Flexible Port Mapping Methods: Automatically selects the best mapping solution based on different Providers (native, device proxy, iptables, etc.)</p></li><li><p>Integrated vnStat for accurate network traffic statistics, forced synchronization of traffic data during sensitive operations to ensure data accuracy</p></li><li><p>Unified reset of user traffic usage statistics at the beginning of each month, supports user-level, instance-level, and Provider-level traffic statistics and limitations</p></li><li><p>Supports invitation code system, implementing non-public registration mechanism, setting different resource quota limits based on user levels</p></li><li><p>Supports multiple resource restrictions: instance count/CPU/memory/disk/bandwidth quota management, traffic usage limitations</p></li><li><p>All code is open source, but commercial use is not permitted</p></li></ul>`,14)]))}const f=t(o,[["render",r]]);export{m as __pageData,f as default};
