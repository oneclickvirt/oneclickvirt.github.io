import{_ as t,c as n,o as a,ag as i}from"./chunks/framework.CSeR4K32.js";const m=JSON.parse('{"title":"Preface","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"en/guide/oneclickvirt/oneclickvirt_precheck.md","filePath":"en/guide/oneclickvirt/oneclickvirt_precheck.md","lastUpdated":1758963561000}'),r={name:"en/guide/oneclickvirt/oneclickvirt_precheck.md"};function s(o,e,p,c,l,d){return a(),n("div",null,e[0]||(e[0]=[i(`<h1 id="preface" tabindex="-1">Preface <a class="header-anchor" href="#preface" aria-label="Permalink to &quot;Preface&quot;">​</a></h1><p>This is a control panel for interfacing with mainstream virtualization technologies, supplementing content not supported by virtualization technologies themselves such as user management, traffic monitoring, NAT port mapping, and custom system images.</p><p>Welcome to give the project a <code>Star</code> for free support --&gt; <a href="https://github.com/oneclickvirt/oneclickvirt" target="_blank" rel="noreferrer">https://github.com/oneclickvirt/oneclickvirt</a></p><h2 id="environment-requirements" tabindex="-1">Environment Requirements <a class="header-anchor" href="#environment-requirements" aria-label="Permalink to &quot;Environment Requirements&quot;">​</a></h2><p>Supported architectures: amd64 or arm64</p><p>Supported systems: Linux, Windows</p><p>Just need public network access, the deployed machine doesn&#39;t need to have an independent public IP address, this is just a virtualization control panel, as long as there are ports displaying the frontend.</p><p>This control panel has no environment dependency requirements, only a backend started by a daemon process and a corresponding frontend static file folder.</p><p>Frontend static files can be deployed through <code>nginx</code> or <code>caddy</code> or <code>OpenResty</code>, non-source code deployment requires API path reverse proxy to backend port.</p><h2 id="platform-features" tabindex="-1">Platform Features <a class="header-anchor" href="#platform-features" aria-label="Permalink to &quot;Platform Features&quot;">​</a></h2><ul><li><p>Provider Integration: Supports ProxmoxVE, Incus, Docker, LXD four major mainstream virtualization platforms</p></li><li><p>Flexible Instance Types: Supports creating virtual machines (VM) and containers (Container), providing unified virtualized resource management experience through abstracted design</p></li><li><p>Built-in image seed data, no need to search for corresponding platform images yourself, all platforms come with self-compiled image loading, supporting unified management</p></li><li><p>Automatic NAT port mapping: Supports IPv4/IPv6 automatic port mapping, multiple network types:</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NAT IPv4</span></span>
<span class="line"><span>NAT IPv4 + Independent IPv6</span></span>
<span class="line"><span>Independent IPv4</span></span>
<span class="line"><span>Independent IPv4 + IPv6</span></span>
<span class="line"><span>Pure IPv6</span></span></code></pre></div><ul><li><p>Flexible port mapping methods: Automatically selects optimal mapping solutions based on different Providers (native, device proxy, iptables, etc.)</p></li><li><p>Integrates vnStat for precise network traffic statistics, forces traffic data synchronization during sensitive operations to ensure data accuracy,</p></li><li><p>Unified reset of user traffic usage statistics at the beginning of each month, supports user-level, instance-level, Provider-level traffic statistics and restrictions</p></li><li><p>Supports invitation code system, implementing non-public registration mechanism, setting different resource quota restrictions based on user levels</p></li><li><p>Supports multiple resource restrictions, instance quantity/CPU/memory/disk/bandwidth quota management, traffic usage restrictions</p></li><li><p>All code is open source, cannot be used commercially</p></li></ul>`,13)]))}const h=t(r,[["render",s]]);export{m as __pageData,h as default};
