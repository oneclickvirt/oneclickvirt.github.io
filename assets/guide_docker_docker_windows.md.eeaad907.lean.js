import{_ as s,v as a,b as o,R as e}from"./chunks/framework.70afa331.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"guide/docker/docker_windows.md","filePath":"guide/docker/docker_windows.md","lastUpdated":1747035720000}'),n={name:"guide/docker/docker_windows.md"},p=e(`<h2 id="开设windows系统虚拟机" tabindex="-1">开设Windows系统虚拟机 <a class="header-anchor" href="#开设windows系统虚拟机" aria-label="Permalink to &quot;开设Windows系统虚拟机&quot;">​</a></h2><h2 id="一键开设-通过vagrant" tabindex="-1">一键开设(通过vagrant) <a class="header-anchor" href="#一键开设-通过vagrant" aria-label="Permalink to &quot;一键开设(通过vagrant)&quot;">​</a></h2><ul><li>共享宿主机所有资源(CPU、内存、硬盘)，基于docker所以只占用系统的大小，适合多开</li><li>共享IP，做了docker的NAT映射，可选择是否映射到外网或仅内网</li><li>设置的win系统默认最多占用为1核2G内存50G硬盘，实际占用看使用情况</li><li>无需iptables进行NAT映射，删除容器时自动删除了端口的映射，方便维护</li><li>需要考虑宿主机是否支持嵌套虚拟化，暂时只支持X86_64架构的系统</li></ul><p><strong>宿主机需要支持嵌套虚拟化，且暂时只支持X86_64架构的系统</strong></p><p>执行</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">egrep -c &#39;(vmx|svm)&#39; /proc/cpuinfo</span></span></code></pre></div><p>结果需要大于或等于1，不能为0</p><p>然后需要先设置docker切换使用v1版cgroup启动</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">sed -i &#39;s/GRUB_CMDLINE_LINUX=&quot;\\(.*\\)&quot;/GRUB_CMDLINE_LINUX=&quot;\\1 systemd.unified_cgroup_hierarchy=0&quot;/&#39; /etc/default/grub</span></span>
<span class="line"><span style="color:#A6ACCD;">update-grub</span></span>
<span class="line"><span style="color:#A6ACCD;">ls</span></span></code></pre></div><p>如果执行都无报错，执行<code>reboot</code>重启系统以使得设置生效</p><p><strong>支持的镜像</strong></p><p>使用的自建的镜像：<a href="https://hub.docker.com/r/spiritlhl/wds" target="_blank" rel="noreferrer">https://hub.docker.com/r/spiritlhl/wds</a></p><table><thead><tr><th>镜像名字</th><th>镜像大小</th></tr></thead><tbody><tr><td>10</td><td>20G</td></tr><tr><td>2022</td><td>17.5G</td></tr><tr><td>2019</td><td>17G</td></tr></tbody></table><p>创建出的容器大小会比镜像大小大一丢丢，但不多</p><p><strong>下载脚本</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">curl -L https://raw.githubusercontent.com/oneclickvirt/docker/main/scripts/onewindows.sh -o onewindows.sh &amp;&amp; chmod +x onewindows.sh</span></span></code></pre></div><p><strong>使用方法</strong></p><p>开设前务必在screen窗口中执行，避免SSH长期链接造成掉线卡死</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">./onewindows.sh 容器名字 系统版本 RDP的端口 是否为外网映射(留空则默认是N，可选Y)</span></span></code></pre></div><p>开设前需要确认宿主机至少有镜像大小的两倍大小加10G硬盘的大小，因为docker在创建容器时得先将镜像拉到本地再创建</p><p>创建过程中，硬盘占用峰值为<code>宿主机系统+镜像大小+容器大小</code></p><p>比如开设容器名字为<code>test</code>，占用最低的<code>Windows 2019</code>系统的容器，映射外网RDP端口为<code>13389</code>，设置为<code>外网映射</code>(映射到你的服务器外网IPV4地址)</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">./onewindows.sh test 2019 13389 Y</span></span></code></pre></div><p>开设后默认的用户名是<code>Administrator</code>和<code>vagrant</code></p><p>默认的密码是<code>vagrant</code></p><p>如果你选择开设映射的外网端口，务必登录后修改对应账户的密码(两个账户都可能有，自行尝试)，否则可能被人爆破滥用</p><p><strong>删除</strong></p><p>需要删除对应镜像和容器，先执行<code>docker ps -a</code>和<code>docker images</code>查询镜像是<code>spiritlhl/wds</code>的ID，然后对应使用</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker rm -f 容器的ID</span></span>
<span class="line"><span style="color:#A6ACCD;">docker rmi 镜像的ID</span></span></code></pre></div><p>删除后可开设别的版本的windows容器</p><p>(在宿主机上使用Docker安装Windows系统，好像绕过了某些商家不允许DD成Win系统的TOS限制)</p><h2 id="通过dockur手动开设" tabindex="-1">通过dockur手动开设 <a class="header-anchor" href="#通过dockur手动开设" aria-label="Permalink to &quot;通过dockur手动开设&quot;">​</a></h2><p>原项目</p><p><a href="https://github.com/dockur/windows" target="_blank" rel="noreferrer">https://github.com/dockur/windows</a></p><p><a href="https://github.com/dockur/windows-arm" target="_blank" rel="noreferrer">https://github.com/dockur/windows-arm</a></p><p>注意，这两个项目都要求宿主机的CPU至少4核，内存至少4G，硬盘至少64G。如果不魔改启动脚本，那么这些最低限制是需要额外参数进行修改的。</p><p>如果需要魔改脚本，可参考</p><p><a href="https://www.spiritysdx.top/20250405/" target="_blank" rel="noreferrer">https://www.spiritysdx.top/20250405/</a></p><p><a href="https://www.spiritysdx.top/20250315/" target="_blank" rel="noreferrer">https://www.spiritysdx.top/20250315/</a></p><p>进行魔改</p><p>对于X86_64架构：</p><p>这里提供一个已经魔改好的单文件版本的docker容器的tar包，通过这个tar包可以自己制作新的Windows镜像</p><p><a href="https://github.com/oneclickvirt/docker/releases/download/amd64_builder/builder.tar" target="_blank" rel="noreferrer">https://github.com/oneclickvirt/docker/releases/download/amd64_builder/builder.tar</a></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">load</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">builder.tar</span></span></code></pre></div><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">RAM_SIZE=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">8G</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-e</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CPU_CORES=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">win2022</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8006</span><span style="color:#C3E88D;">:8006</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--device=/dev/kvm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--device=/dev/net/tun</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--cap-add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">NET_ADMIN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">./当前路径下你下好的Windows的iso镜像名称带尾缀:/boot.iso</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--stop-timeout</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">120</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">windows:builder</span></span></code></pre></div><p>这里也提供一个成品的镜像，内置Windows镜像，内置自动硬盘扩容自启任务，docker导入后即可使用</p>`,46),t=[p];function l(r,c,d,i,C,h){return a(),o("div",null,t)}const D=s(n,[["render",l]]);export{u as __pageData,D as default};
